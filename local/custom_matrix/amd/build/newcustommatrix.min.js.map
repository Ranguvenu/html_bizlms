{"version":3,"file":"newcustommatrix.min.js","sources":["../src/newcustommatrix.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_costcenter/costcenter\n * @class      NewCostcenter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n    /**\n     * Constructor\n     * @type {args}\n     * Each call to init gets it's own instance of this class.\n     */\n    var Newcustommatrix = function(args) {\n        this.contextid = args.contextid;\n        this.repositoryid = args.repositoryid;\n        this.parentcatid = args.parentcatid;\n        var self = this;\n        self.init(args);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    Newcustommatrix.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    Newcustommatrix.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     * @type {args}\n     */\n    Newcustommatrix.prototype.init = function(args) {\n        var self = this;\n\n        // Fetch the title string.\n        var editid = $(this).data('value');\n        if (editid) {\n            self.repositoryid = editid;\n        }\n        if(self.parentcatid){\n            if(this.repositoryid){\n                var head = Str.get_string('updatecusmatrixperformance', 'local_custom_matrix');\n            }else{\n                var head = Str.get_string('addmatrixperformance', 'local_custom_matrix');\n            }\n        }else\n        {\n            if(this.repositoryid){\n                var head = Str.get_string('updatecusmatrixtype', 'local_custom_matrix');\n            }else{\n                var head = Str.get_string('addmatrixtype', 'local_custom_matrix');\n            }\n        }\n        return head.then(function(title) {\n            // Create the modal.\n            return ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: title,\n                body: self.getBody()\n            });\n        }.bind(self)).then(function(modal) {\n\n            // Keep a reference to the modal.\n            self.modal = modal;\n            // Forms are big, we want a big modal.\n            self.modal.setLarge();\n            this.modal.getRoot().addClass('openLMStransition local_custom_matrix');\n\n            // We want to reset the form every time it is opened.\n             this.modal.getRoot().on(ModalEvents.hidden, function() {\n                this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                setTimeout(function(){\n                    modal.destroy();\n                }, 1000);\n            }.bind(this));\n            self.modal.getRoot().on(ModalEvents.hidden, function() {\n                modal.destroy();\n            }.bind(this));\n            self.modal.getRoot().on(ModalEvents.shown, function() {\n                self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                    modal.hide();\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 1000);\n                });\n            }.bind(this));\n\n            // We catch the modal save event, and use it to submit the form inside the modal.\n            // Triggering a form submission will give JS validation scripts a chance to check for errors.\n            self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n            // We also catch the form submit event and use it to submit the form with ajax.\n            self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n            self.modal.show();\n            this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n            return this.modal;\n        }.bind(this));\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @type {args}\n     * @return {Promise}\n     */\n    Newcustommatrix.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        var params = {repositoryid:this.repositoryid, jsonformdata: JSON.stringify(formdata), parentcatid:this.parentcatid};\n        return Fragment.loadFragment('local_custom_matrix', 'new_custom_matrix_form', this.contextid, params);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    Newcustommatrix.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @type {data}\n     * @return {Promise}\n     */\n    Newcustommatrix.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    Newcustommatrix.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_custom_matrix_submit_custom_matrix_form',\n            args: {contextid: this.contextid, jsonformdata: formData},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    Newcustommatrix.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_costcenter/newcostcenter */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @type {args}\n         * @return {Promise}\n         */\n        init: function(args) {\n            return new Newcustommatrix(args);\n        },\n        load: function(){\n\n        },\n        deletematrix: function(args) {\n\n\n            return Str.get_strings([{\n                key: 'confirm'\n            },\n            {\n                key: 'deletematrix',\n                component: 'local_custom_matrix',\n                param :args\n            },\n            {\n                key: 'no',\n                component: 'local_custom_matrix',\n                param :args\n            },\n            {\n                key: 'yesdelete',\n                component: 'local_custom_matrix',\n                param :args\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                     footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+s[3]+'</button>&nbsp;' +\n                     '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+s[2]+'</button>'\n                })\n\n                .done(function(modal) {\n                    this.modal = modal;\n\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        args.confirm = true;\n                        $.ajax({\n                            method: \"POST\",\n                            dataType: \"json\",\n                            url: M.cfg.wwwroot + \"/local/custom_matrix/ajax.php?action=\"+args.selector+\"&matrixid=\"+args.matrixid,\n                            success: function(){\n                                window.location.reload();\n                            }\n                        });\n\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n        nodelete: function(args) {\n\n            if(args.parentcatid){\n                var head = Str.get_string('nodeletecatchild', 'local_custom_matrix', args);\n            }else{\n                var head = Str.get_string('nodeletecattop', 'local_custom_matrix', args);\n            }\n            return head.then(function(body) {\n                return ModalFactory.create({\n                    title: Str.get_string('reason', 'local_custom_matrix'),\n                    type: ModalFactory.types.DEFAULT,\n                    body: body,\n                });\n\n            }.bind(self)).done(function(modal) {\n                this.modal = modal;\n                modal.show();\n            }.bind(this));\n        },\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","Newcustommatrix","args","this","contextid","repositoryid","parentcatid","init","prototype","modal","self","editid","data","head","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","addClass","on","hidden","animate","right","setTimeout","destroy","shown","append","getFooter","find","hide","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","setBody","e","preventDefault","formData","serialize","call","methodname","done","fail","submit","load","deletematrix","get_strings","key","component","param","s","DEFAULT","footer","confirm","ajax","method","dataType","url","cfg","wwwroot","selector","matrixid","success","window","nodelete"],"mappings":"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"}
